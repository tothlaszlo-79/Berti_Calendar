//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2024. 05. 05. 17:47:41
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using enNamespace;

namespace Berti_Calendar
{

    public partial class cnContext : DbContext
    {

        public cnContext() :
            base()
        {
            OnCreated();
        }

        public cnContext(DbContextOptions<cnContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=INFO-TOTHL-NB; Initial Catalog=Berti; Integrated Security=False; Persist Security Info=True; User ID=L_LA01; Password=password; TrustServerCertificate=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Felhasznalo> Felhasznalok
        {
            get;
            set;
        }

        public virtual DbSet<Szoba> Szobak
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.FelhasznaloMapping(modelBuilder);
            this.CustomizeFelhasznaloMapping(modelBuilder);

            this.SzobaMapping(modelBuilder);
            this.CustomizeSzobaMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Felhasznalo Mapping

        private void FelhasznaloMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Felhasznalo>().ToTable(@"Felhasznalo");
            modelBuilder.Entity<Felhasznalo>().Property(x => x.id).HasColumnName(@"id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.Nev).HasColumnName(@"Nev").IsRequired().ValueGeneratedNever().HasMaxLength(75);
            modelBuilder.Entity<Felhasznalo>().Property(x => x.EMail).HasColumnName(@"EMail").IsRequired().ValueGeneratedNever().HasMaxLength(75);
            modelBuilder.Entity<Felhasznalo>().Property(x => x.szoba_id).HasColumnName(@"szoba_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.Szin).HasColumnName(@"Szin").IsRequired().ValueGeneratedNever().HasMaxLength(25);
            modelBuilder.Entity<Felhasznalo>().HasKey(@"id");
        }

        partial void CustomizeFelhasznaloMapping(ModelBuilder modelBuilder);

        #endregion

        #region Szoba Mapping

        private void SzobaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Szoba>().ToTable(@"Szoba");
            modelBuilder.Entity<Szoba>().Property(x => x.id).HasColumnName(@"id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Szoba>().Property(x => x.Szam).HasColumnName(@"Szam").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Szoba>().HasKey(@"id");
        }

        partial void CustomizeSzobaMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
